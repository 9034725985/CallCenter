@page "/fetchperson"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Data.Model
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Persons</PageTitle>

<h1>Get Persons</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (persons == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Legal Name</th>
                <th>Preferred Name</th>
                <th>Alias</th>
                <th>External ID</th>
                <th>Modified at (UTC)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in persons)
            {
                <tr>
                    <td>@person.Id</td>
                    <td>@person.Title</td>
                    <td>@person.LegalName</td>
                    <td>@person.PreferredName</td>
                    <td>@person.Alias</td>
                    <td>@person.ExternalId</td>
                    <td>@person.ModifiedDate</td>
                </tr>
            }
        </tbody>
    </table>

    if (@persons.First().Stopwatch != null)
    {
        <pre>Results fetched in about @persons.First().Stopwatch?.ElapsedMilliseconds milliseconds or @persons.First().Stopwatch?.ElapsedTicks ticks.</pre>
    }

    <button @onclick="UpdateMyPerson">Update now</button>
}

@code {
    private MyPerson[]? persons;
    private List<MyInteger> myIntegers = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            persons = await Http.GetFromJsonAsync<MyPerson[]>("Person");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected async Task UpdateMyPerson()
    {
        try
        {
            persons = await Http.GetFromJsonAsync<MyPerson[]>("Person");
            if (persons?.Count() > 0)
            {
                myIntegers = new();
                //foreach (MyPerson person in persons)
                //{
                //    person.ModifiedBy = person.Id;
                //    person.ModifiedDate = DateTime.UtcNow;
                //    var response = await Http.PutAsJsonAsync<MyPerson>("Person", person);
                //}
                var tasks = persons.ToList().Select(person => Http.PutAsJsonAsync<MyPerson>("Person", person));
                var updateResponse = await Task.WhenAll(tasks);
                persons = await Http.GetFromJsonAsync<MyPerson[]>("Person");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
