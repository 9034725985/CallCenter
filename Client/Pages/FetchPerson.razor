@page "/fetchperson"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Data.Model
@using Newtonsoft.Json;
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Persons</PageTitle>

<h1>Get Persons</h1>

<p>This component demonstrates fetching data from the server.</p>
<pre>@strPersons</pre>
@*@if (persons.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Legal Name</th>
                <th>Preferred Name</th>
                <th>Alias</th>
                <th>External ID</th>
                <th>Modified at (UTC)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in persons)
            {
                <tr>
                    <td>@person.Id</td>
                    <td>@person.Title</td>
                    <td>@person.LegalName</td>
                    <td>@person.PreferredName</td>
                    <td>@person.Alias</td>
                    <td>@person.ExternalId</td>
                    <td>@person.ModifiedDate</td>
                </tr>
            }
        </tbody>
    </table>

    
}
else
{
    <p><em>Loading...</em></p>
}*@
<button @onclick="UpdateMyPerson">Update now</button>


@code {
    private List<MyPerson> persons = new();
    private List<MyInteger> myIntegers = new();
    private string strPersons = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            persons = await GetAllPersons();
            string strPrivatePersons = JsonConvert.SerializeObject(persons, Formatting.Indented);
            Console.WriteLine($"{nameof(strPrivatePersons)} {strPrivatePersons} in ${nameof(OnInitializedAsync)}");
            strPersons = strPrivatePersons;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected async Task UpdateMyPerson()
    {
        try
        {
            persons = await GetAllPersons();
            string strPrivatePersons = JsonConvert.SerializeObject(persons, Formatting.Indented);
            Console.WriteLine($"{nameof(strPrivatePersons)} {strPrivatePersons} in ${nameof(UpdateMyPerson)}");
            strPersons = strPrivatePersons;
            if (persons.Any())
            {
                myIntegers = new();
                foreach (MyPerson person in persons)
                {
                    person.ModifiedBy = person.Id;
                    person.ModifiedDate = DateTime.UtcNow;
                    //var response = await Http.PutAsJsonAsync<MyPerson>("Person", person);
                }
                var tasks = persons.ToList().Select(person => Http.PutAsJsonAsync<MyPerson>("Person", person));
                var updateResponse = await Task.WhenAll(tasks);
                persons = await GetAllPersons();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected async Task<List<MyPerson>> GetAllPersons()
    {
        string? strPrivatePersons = await Http.GetStringAsync("Person");
        Console.WriteLine($"{nameof(strPrivatePersons)} {strPrivatePersons} in ${nameof(GetAllPersons)}");
        if (!string.IsNullOrWhiteSpace(strPrivatePersons))
        {
            strPersons = strPrivatePersons;
            List<MyPerson>? myPersons = JsonConvert.DeserializeObject<List<MyPerson>>(strPrivatePersons);
            if (myPersons != null && myPersons.Any())
            {
                return myPersons;
            }
        }
        return new();
    }
}
